//Q124.Binary tree maximum path sum 
//Hard
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxsum(TreeNode* root,int &maxi)
    {
        if(root==NULL)
        {
            return 0;
        }
        
        int leftsum=max(0,maxsum(root->left,maxi));
        int rightsum=max(0,maxsum(root->right,maxi));
        int sum=max(root->val,leftsum+rightsum+root->val);
        if(maxi<sum)
        {
            maxi=sum;
        }
        int pathmax=max(leftsum+root->val,rightsum+root->val);
        if(maxi<pathmax)
        {
            maxi=pathmax;
        }
        return pathmax;
    }
    int maxPathSum(TreeNode* root) {
     //working on path
     if(root==NULL)
     {
        return 0;
     }
     int maxi=INT_MIN;
     maxsum(root,maxi);
return maxi;


    }
};







//optimal approach is 
class Solution {
public:
    int maxi = INT_MIN;

    int maxPathDown(TreeNode* node){
        if(!node) return 0;

        int left = max(0, maxPathDown(node->left));
        int right = max(0, maxPathDown(node->right));

        maxi = max(maxi, left + right + node->val);

        return max(left,right) + node->val;
    }

    int maxPathSum(TreeNode* root) {
        maxPathDown(root);
        return maxi;
    }
};

